<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ahooks学习</title>
      <link href="/2023/01/06/ahooks%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/06/ahooks%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>迁移项目中，随处可见<code>ahooks</code>的身影，在抱有好奇心以及探索 React 中 <strong>自定义 hook</strong> 的最佳实践的过程中。于是便有这篇了<code>ahooks</code>源码解析系列。</p></li><li><p><code>ahooks</code>中有大量的<code>TS</code>定义，可以从中吸取到很多的代码设计，快速上手<code>React+TS</code>开发模式。</p></li><li><p>简单快速即可上手阅读<code>ahooks</code>源码，低耦合性也让代码结构更加清晰，调试者也不需要关注复杂的逻辑。</p></li></ul><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2F" title="https://ahooks.js.org/zh-CN/">官方文档</a></p><h3 id="一）-介绍"><a href="#一）-介绍" class="headerlink" title="一） 介绍"></a>一） 介绍</h3><blockquote><p>ahooks，发音 [eɪ hʊks]，是一套高质量可靠的 React Hooks 库。在当前 React 项目研发过程中，一套好用的 React Hooks 库是必不可少的，希望 ahooks 能成为您的选择。</p></blockquote><p>特性</p><ul><li>易学易用</li><li>支持 SSR</li><li>对输入输出函数做了特殊处理，且避免闭包问题</li><li>包含大量提炼自业务的高级 Hooks</li><li>包含丰富的基础 Hooks</li><li>使用 TypeScript 构建，提供完整的类型定义文件</li></ul><p>安装</p><p>\<code>shell$ npm install --save ahooks # or$ yarn add ahooks # or$ pnpm add ahooks\\</code></p><p>使用</p><pre><code>import &#123; useRequest &#125; from &#39;ahooks&#39;;</code></pre><h3 id="二）拉取-ahooks-代码"><a href="#二）拉取-ahooks-代码" class="headerlink" title="二）拉取 ahooks 代码"></a>二）拉取 ahooks 代码</h3><p>将仓库 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Falibaba%2Fhooks" title="https://github.com/alibaba/hooks">ahooks</a> clone 到本地</p><p>拉起下来的代码里面会有很多工程化的文件，这里就不会做过多介绍了，因为是即便完全不懂这些东西，也不妨碍你可以轻松的调试<code>ahooks</code>源码。</p><p>在<code>CONTRIBUTING.zh-CN</code>文件中有其贡献指南和启动项目的流程。</p><pre><code>pnpm installpnpm run init复制代码</code></pre><p>代码运行起来之后就可以在本地看到一份和官网一模一样的文档了。</p><h3 id="三）常用-Hook-源码解析"><a href="#三）常用-Hook-源码解析" class="headerlink" title="三）常用 Hook 源码解析"></a>三）常用 Hook 源码解析</h3><p>目前部门主要采用的是 <code>Mobx+React+TS</code> 以及自研组件库，关于操作视图层的<code>hooks</code>这里就不做过多介绍了，感兴趣的可以自己研究一下～</p><h4 id="3-1-useDebounceFn"><a href="#3-1-useDebounceFn" class="headerlink" title="3.1 useDebounceFn"></a>3.1 <a href="https://link.juejin.cn?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-debounce-fn" title="https://ahooks.js.org/zh-CN/hooks/use-debounce-fn">useDebounceFn</a></h4><p>用来处理防抖函数的 Hook。用法和 <code>debounce</code> 非常类似。</p><p>const [value, setValue] = useState(0);<br>const { run } = useDebounceFn(<br>() =&gt; {<br>setValue(value + 1);<br>},<br>{<br>wait: 500,<br>},<br>);</p><p>补充一点：</p><ul><li>空值合并运算符 ?? ,<code>a = b ?? c</code> 只要 b 不为<code>null</code>or <code>undefined</code>则<code>a = b</code> ,否则<code>a = c</code></li><li><p><strong>空值合并操作符</strong>（ <strong><code>??</code></strong> ）是一个逻辑操作符，当左侧的操作数为  <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fnull" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null"><code>null</code></a>  或者  <a href="https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2Fundefined" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>  时，返回其右侧操作数，否则返回左侧操作数。</p><p>let a = 1<br>let b = 2<br>const c = a ?? b // c = 1<br>b = undefined<br>const d = b ?? a // d = 1<br>复制代码</p></li></ul><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><pre><code>import debounce from &#39;lodash/debounce&#39;;import &#123; useMemo &#125; from &#39;react&#39;;import type &#123; DebounceOptions &#125; from &#39;../useDebounce/debounceOptions&#39;;import useLatest from &#39;../useLatest&#39;;import useUnmount from &#39;../useUnmount&#39;;import &#123; isFunction &#125; from &#39;../utils&#39;;type noop = (...args: any) =&gt; any;function useDebounceFn&lt;T extends noop&gt;(fn: T, options?: DebounceOptions) &#123;  ... 省去部分代码  // 永远使用最新的fn  const fnRef = useLatest(fn);  // 空值校验  const wait = options?.wait ?? 1000;  // 思考一下 这里为什么要使用useMemo来包一层呢 ？  // 其实hook也是一个函数，当组件reRender的时候hook也会重新执行一变，所以需要useMemo来记录已经保存下来的结果  const debounced = useMemo(    () =&gt;      debounce(        (...args: Parameters&lt;T&gt;): ReturnType&lt;T&gt; =&gt; &#123;          return fnRef.current(...args);        &#125;,        wait,        options,      ),    [],  );  // 组件销毁时，取消防抖函数调用。防止造成内存泄漏  useUnmount(() =&gt; &#123;    debounced.cancel();  &#125;);  return &#123;    run: debounced,    cancel: debounced.cancel,    flush: debounced.flush,  &#125;;&#125;export default useDebounceFn;</code></pre><p><strong>useLastest.ts</strong></p><p>这个 hook 的使用场景目前还没找到很好的答案。如果按照这个 实现，每次获取最新的值，那为什么不直接使用 value 呢？</p><p>在和一位大佬探讨后，目前得到的结果就是为了适应某些闭包场景。</p><pre><code>import &#123; useRef &#125; from &#39;react&#39;;function useLatest(value) &#123;  var ref = useRef(value);  ref.current = value;  return ref;&#125;export default useLatest;复制代码</code></pre><h5 id="从-useDebounceFn-可以学习到的-TS-编码"><a href="#从-useDebounceFn-可以学习到的-TS-编码" class="headerlink" title="从 useDebounceFn 可以学习到的 TS 编码"></a>从 useDebounceFn 可以学习到的 TS 编码</h5><pre><code>type noop = (...args: any) =&gt; any;function useDebounceFn&lt;T extends noop&gt;(fn: T, options?: DebounceOptions)复制代码</code></pre><p>在 TS 中 extends 关键字可以对传入的进来的范型类型进行限制。</p><p>举个简单的 🌰</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/799c0a4760244fbea3adc151a62840b2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><pre><code>function useDebounceFn&lt;T extends noop&gt;(fn: T, options?: DebounceOptions) &#123;  ...  const debounced = useMemo(    () =&gt;      debounce(        (...args: Parameters&lt;T&gt;): ReturnType&lt;T&gt; =&gt; &#123;          return fnRef.current(...args);        &#125;,        wait,        options,      ),    [],  );  ....&#125;复制代码</code></pre><ul><li><code>Parameters</code> 和 <code>ReturnType</code> 可以分别获取 TS 中函数的入参类型和返回类型。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b9439b5c9be457a934c4bdc8ca041e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/141f793c874d4083ba2e47768a43decf~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><h4 id="3-2-useCreation"><a href="#3-2-useCreation" class="headerlink" title="3.2 useCreation"></a>3.2 <a href="https://link.juejin.cn?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-creation" title="https://ahooks.js.org/zh-CN/hooks/use-creation">useCreation</a></h4><p>useCreation 是  <code>useMemo</code>  或  <code>useRef</code>  的替代品。</p><p>举个简单的 🌰</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Famazing-smoke-yovivf%3Ffile%3D%2Fsrc%2FApp.js%3A295-297" title="https://codesandbox.io/s/amazing-smoke-yovivf?file=/src/App.js:295-297">sandbox</a></p><p>这里每次修改<code>count</code>的值，<code>getRrandomNum</code>都会被重新执行（执行两次是因为 React 中的严格模式…）</p><p>换成<code>useCreaction</code>就完美解决了这个问题 <a href="https://link.juejin.cn?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fdetermined-albattani-060hd4%3Ffile%3D%2Fsrc%2FApp.js" title="https://codesandbox.io/s/determined-albattani-060hd4?file=/src/App.js">sandbox</a></p><h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><pre><code>import type &#123; DependencyList &#125; from &#39;react&#39;;import &#123; useRef &#125; from &#39;react&#39;;import depsAreSame from &#39;../utils/depsAreSame&#39;;export default function useCreation&lt;T&gt;(factory: () =&gt; T, deps: DependencyList) &#123;  const &#123; current &#125; = useRef(&#123;    deps,    obj: undefined as undefined | T,    initialized: false,  &#125;);  / *    * 虽然useCreation函数会随着组件的reRender而重新执行    * 但是factory函数只有首次进来或者deps依赖发生改变才会重新执行    */  if (current.initialized === false || !depsAreSame(current.deps, deps)) &#123;    current.deps = deps;    current.obj = factory();    current.initialized = true;  &#125;  return current.obj as T;&#125;复制代码</code></pre><p>depsAreSame</p><p>功能：对比两个依赖是否相等</p><pre><code>import type &#123; DependencyList &#125; from &#39;react&#39;;function depsAreSame(oldDeps: DependencyList, deps: DependencyList): boolean &#123;  if (oldDeps === deps) return true;  for (let i = 0; i &lt; oldDeps.length; i++) &#123;    if (!Object.is(oldDeps[i], deps[i])) return false;  &#125;  return true;&#125;复制代码</code></pre><h5 id="从-useCreation-中学到的-TS-技巧"><a href="#从-useCreation-中学到的-TS-技巧" class="headerlink" title="从 useCreation 中学到的 TS 技巧"></a>从 useCreation 中学到的 TS 技巧</h5><ul><li><p><code>import type ... from</code>让编译器知道要导入的内容绝对是一种类型。详情见 <a href="https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000039800522" title="https://segmentfault.com/a/1190000039800522">你不知道的 import type</a>)</p></li><li><p><code>undefined as undefined | T</code>当给一个变量值，并且需要限制类型的时候，可以通过 as 类型断言操作。</p></li></ul><h4 id="3-3-useSize"><a href="#3-3-useSize" class="headerlink" title="3.3 useSize"></a>3.3 <a href="https://link.juejin.cn?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-size" title="https://ahooks.js.org/zh-CN/hooks/use-size">useSize</a></h4><p>监听 DOM 节点尺寸变化的 Hook。</p><p>使用场景: 当某个元素的大小发生改变时，需要进行一系列操作。</p><p>举个 🌰: 当我们使用 <code>echarts</code> 绘制图标的时候就会出现这样的问题。当 <code>echarts</code> 的容器的大小是自适应单位，如<code>rem vw</code>等。我们希望绘制出来的图标也可以跟随容器大小改变而改变。</p><pre><code> const size = useSize(EchartsDomRef);  useEffect(() =&gt; &#123;    if (chartRef.current) &#123;      chartRef.current.resize(); // 当容器宽度发生改变的时候，调用resize方法重新渲染echarts    &#125;  &#125;, [size.width]);  useEffect(() =&gt; &#123;    chartRef.current = echarts.init(EchartsDomRef.current);  &#125;, []);复制代码</code></pre><h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><pre><code>import ResizeObserver from &#39;resize-observer-polyfill&#39;;import useRafState from &#39;../useRafState&#39;;import type &#123; BasicTarget &#125; from &#39;../utils/domTarget&#39;;import &#123; getTargetElement &#125; from &#39;../utils/domTarget&#39;;import useIsomorphicLayoutEffectWithTarget from &#39;../utils/useIsomorphicLayoutEffectWithTarget&#39;;type Size = &#123; width: number; height: number &#125;;function useSize(target: BasicTarget): Size | undefined &#123;  const [state, setState] = useRafState&lt;Size&gt;();  useIsomorphicLayoutEffectWithTarget(    () =&gt; &#123;      const el = getTargetElement(target);      if (!el) &#123;        return;      &#125;      const resizeObserver = new ResizeObserver((entries) =&gt; &#123;        entries.forEach((entry) =&gt; &#123;          const &#123; clientWidth, clientHeight &#125; = entry.target;          setState(&#123;            width: clientWidth,            height: clientHeight,          &#125;);        &#125;);      &#125;);      resizeObserver.observe(el);      return () =&gt; &#123;        resizeObserver.disconnect();      &#125;;    &#125;,    [],    target,  );  return state;&#125;export default useSize;复制代码</code></pre><h4 id="3-3-useUnmountedRef"><a href="#3-3-useUnmountedRef" class="headerlink" title="3.3 useUnmountedRef"></a>3.3 <a href="https://link.juejin.cn?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-unmounted-ref" title="https://ahooks.js.org/zh-CN/hooks/use-unmounted-ref">useUnmountedRef</a></h4><p>获取当前组件是否已经卸载的 Hook。</p><p>使用场景: 发送网络请求前/后，判断组件是否已经销毁。如果销毁取消本次请求/减少后续的一系列操作。</p><p>举个 🌰</p><pre><code>const unMounted = useUnmountedRef();getData.then(res =&gt; &#123;    if (unMounted.current) &#123;      return;    &#125;    ....一些列耗时的操作&#125;)复制代码</code></pre><h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><p>这个 hook 的实现很简单。在组件挂载在 dom 上的时候设置值<code>false</code>,当组件销毁的时候设置为<code>true</code>。</p><pre><code>import &#123; useEffect, useRef &#125; from &#39;react&#39;;const useUnmountedRef = () =&gt; &#123;  const unmountedRef = useRef(false);  useEffect(() =&gt; &#123;    unmountedRef.current = false;    return () =&gt; &#123;      unmountedRef.current = true;    &#125;;  &#125;, []);  return unmountedRef;&#125;;export default useUnmountedRef;复制代码</code></pre><h4 id="3-4-useMemoizedFn"><a href="#3-4-useMemoizedFn" class="headerlink" title="3.4 useMemoizedFn"></a>3.4 <a href="https://link.juejin.cn?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-memoized-fn" title="https://ahooks.js.org/zh-CN/hooks/use-memoized-fn">useMemoizedFn</a></h4><p>持久化 function 的 Hook，理论上，可以使用 useMemoizedFn 完全代替 useCallback。</p><h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><p>使用过 <code>Vue3</code> 的一定不会陌生<code>WatchEffect</code>的自动收集依赖机制;</p><p>这里实现也很巧妙，re-render 阶段不断更新 <code>fn.Ref.current</code> 的引用值。 但是<code>memoizedFn.current</code>指向的函数返回值就是函数 fn 最新的返回值，同时<code>memoizedFn</code>只会在挂载阶段赋值一次，这样就确保了<code>memoizedFn.current</code> 的引用地址保持不变。</p><pre><code>import &#123; useMemo, useRef &#125; from &#39;react&#39;;type noop = (this: any, ...args: any[]) =&gt; any;type PickFunction&lt;T extends noop&gt; = (  this: ThisParameterType&lt;T&gt;,  ...args: Parameters&lt;T&gt;) =&gt; ReturnType&lt;T&gt;;function useMemoizedFn&lt;T extends noop&gt;(fn: T) &#123;  const fnRef = useRef&lt;T&gt;(fn);  // why not write fnRef.current = fn?  // https://github.com/alibaba/hooks/issues/728  fnRef.current = useMemo(() =&gt; fn, [fn]);  const memoizedFn = useRef&lt;PickFunction&lt;T&gt;&gt;();  if (!memoizedFn.current) &#123;    memoizedFn.current = function (this, ...args) &#123;      return fnRef.current.apply(this, args);    &#125;;  &#125;  return memoizedFn.current as T;&#125;复制代码</code></pre><h4 id="3-5-useLockFn"><a href="#3-5-useLockFn" class="headerlink" title="3.5 useLockFn"></a>3.5 <a href="https://link.juejin.cn?target=https%3A%2F%2Fahooks.js.org%2Fzh-CN%2Fhooks%2Fuse-lock-fn" title="https://ahooks.js.org/zh-CN/hooks/use-lock-fn">useLockFn</a></h4><p>用于给一个异步函数增加 竞 态锁，防止并发执行。</p><p>使用场景: 在许多场景中都可以使用<code>useLockFn</code>来减少网络上的开销。</p><p>举个简单的 🌰 如果现在有个上拉加载的函数<code>loadMore</code>。这个函数需要进行网络请求才会返回最终的结果。一般的做法就是通过设置<code>isLoading</code>状态来判断函数是否执行。但是有了<code>useLockFn</code>我们的代码就会变得简易许多，业务逻辑也会变得更加清晰。</p><pre><code>const loadMore = async () =&gt; &#123;    if(isLoading) return    isLoading = true    const data = await getMockData(...parasms)    isLoading = false&#125;复制代码</code></pre><h5 id="核心代码-5"><a href="#核心代码-5" class="headerlink" title="核心代码"></a>核心代码</h5><p>实现也非常简单，就是利用了<code>useRef</code>在整个生命周期只会初始化一次，来记录一个状态变量，判断 <code>fn</code> 是否执行完毕。</p><pre><code>import &#123; useRef, useCallback &#125; from &#39;react&#39;;function useLockFn&lt;P extends any[] = any[], V extends any = any&gt;(fn: (...args: P) =&gt; Promise&lt;V&gt;) &#123;  const lockRef = useRef(false);  return useCallback(    async (...args: P) =&gt; &#123;      if (lockRef.current) return;      lockRef.current = true;      try &#123;        const ret = await fn(...args);        lockRef.current = false;        return ret;      &#125; catch (e) &#123;        lockRef.current = false;        throw e;      &#125;    &#125;,    [fn],  );&#125;复制代码</code></pre><p>但这里有个小问题 ？大家知道为什么这里需要使用<code>useCallback</code>来包一层嘛，而不是直接返已经处理了 竞态 🔒 逻辑的函数呢？</p><p>答案也很简单，当传入函数 fn 并不是一个临时函数，而是一个引用。当 fn 的引用地址未发生改变的时候，就防止了 useLockFn 函数返回结果发生改变，有可能会造成子组件的 re-render。</p><h3 id="四）Other-hook"><a href="#四）Other-hook" class="headerlink" title="四）Other hook"></a>四）Other hook</h3><h4 id="4-1-useUpdateEffect"><a href="#4-1-useUpdateEffect" class="headerlink" title="4.1 useUpdateEffect"></a>4.1 useUpdateEffect</h4><p><code>useUpdateEffect</code>用法等同于  <code>useEffect</code>，但是会忽略首次执行，只在依赖更新时执行。</p><pre><code>import &#123; useRef &#125; from &#39;react&#39;;import type &#123; useEffect, useLayoutEffect &#125; from &#39;react&#39;;type EffectHookType = typeof useEffect | typeof useLayoutEffect;export const createUpdateEffect: (hook: EffectHookType) =&gt; EffectHookType =  (hook) =&gt; (effect, deps) =&gt; &#123;    const isMounted = useRef(false);    // for react-refresh    hook(() =&gt; &#123;      return () =&gt; &#123;        isMounted.current = false;      &#125;;    &#125;, []);    // update    hook(() =&gt; &#123;      if (!isMounted.current) &#123;        isMounted.current = true;      &#125; else &#123;        return effect();      &#125;    &#125;, deps);  &#125;;const useUpdateEffect = createUpdateEffect(useEffect);复制代码</code></pre><p>首次进入函数会执行两次 hook 这里其实就是<code>useEffect</code>设置状态变量<code>isMounted</code>为<code>true</code>,接下来每次更新就直接执行<code>effect</code>函数。</p><h4 id="4-2-useSetState"><a href="#4-2-useSetState" class="headerlink" title="4.2 useSetState"></a>4.2 useSetState</h4><p>管理 object 类型 state 的 Hooks，用法与 class 组件的  <code>this.setState</code>  基本一致。</p><pre><code>import &#123; useCallback, useState &#125; from &#39;react&#39;;import &#123; isFunction &#125; from &#39;../utils&#39;;export type SetState&lt;S extends Record&lt;string, any&gt;&gt; = &lt;K extends keyof S&gt;(  state: Pick&lt;S, K&gt; | null | ((prevState: Readonly&lt;S&gt;) =&gt; Pick&lt;S, K&gt; | S | null),) =&gt; void;const useSetState = &lt;S extends Record&lt;string, any&gt;&gt;(  initialState: S | (() =&gt; S),): [S, SetState&lt;S&gt;] =&gt; &#123;  const [state, setState] = useState&lt;S&gt;(initialState);  // 入参为函数的时候直接执行函数，得到返回值再与旧值扩展合并。  const setMergeState = useCallback((patch) =&gt; &#123;    setState((prevState) =&gt; &#123;      const newState = isFunction(patch) ? patch(prevState) : patch;      return newState ? &#123; ...prevState, ...newState &#125; : prevState;    &#125;);  &#125;, []);  return [state, setMergeState];&#125;;复制代码</code></pre><h4 id="4-3-usePrevious"><a href="#4-3-usePrevious" class="headerlink" title="4.3 usePrevious"></a>4.3 usePrevious</h4><p>保存上一次状态的 Hook。一般用于缓存状态。</p><pre><code>import &#123; useRef &#125; from &#39;react&#39;;export type ShouldUpdateFunc&lt;T&gt; = (prev: T | undefined, next: T) =&gt; boolean;const defaultShouldUpdate = &lt;T&gt;(a?: T, b?: T) =&gt; !Object.is(a, b);function usePrevious&lt;T&gt;(  state: T,  shouldUpdate: ShouldUpdateFunc&lt;T&gt; = defaultShouldUpdate,): T | undefined &#123;  const prevRef = useRef&lt;T&gt;();  const curRef = useRef&lt;T&gt;();  // 进行 shallow equal 比较  if (shouldUpdate(curRef.current, state)) &#123;    prevRef.current = curRef.current;    curRef.current = state;  &#125;  return prevRef.current;&#125;复制代码</code></pre><h4 id="四-总结"><a href="#四-总结" class="headerlink" title="四)总结"></a>四)总结</h4><p>最后！！！学习 ahooks 一定是你 React 新手进阶最好的源码库。</p><p>第一篇关于 Ahooks 源码解析 就这样结束了，感觉<code>useRequest</code>和<code>useUrlState</code>这两个 hook 可以单独拿出来讲讲。期待下一篇吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react进阶实践指南</title>
      <link href="/2023/01/06/react%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/"/>
      <url>/2023/01/06/react%E8%BF%9B%E9%98%B6%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="react-进阶实践指南"><a href="#react-进阶实践指南" class="headerlink" title="react 进阶实践指南"></a>react 进阶实践指南</h1>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/04/hello-world/"/>
      <url>/2023/01/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
